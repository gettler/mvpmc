#!/usr/bin/python
#
# SConscript
#

import os

Import ('env')

libdir = env['INSTLIBDIR']
mysql_libdir = env['INSTLIBDIR'] + '/mysql'
target = env['TARG']
toplevel = env['TOPLEVEL']
bindir = env['INSTBINDIR']
linkmode = env['LINKMODE']
gtkcflags = env['GTKCFLAGS']
gtkldflags = env['GTKLDFLAGS']
ldflags = env['LDFLAGS']

#
# XXX: dslinux uclibc build does not include large file support...
#
if target != 'mg35':
	env.Append(CCFLAGS = ' -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE')
	env.Append(CCFLAGS = ' ' + gtkcflags)

version = os.system(toplevel + '/src/version.sh ' + toplevel + ' ' +
		    toplevel + '/src ' + target)

if target == 'host':
	libx11dir = ['/usr/X11R6/lib']
	libFLAC = []
	libx11 = ['X11', 'pthread', 'rt', 'Xau', 'dl', 'Xdmcp']
	libs = []
	linkflags = ''
	mvpapps = []
else:
	libx11dir = []
	libFLAC = ['libFLAC']
	libx11 = []
	libs = [ 'tiwlan' ]
	linkflags = ''
	mvpapps = ['ticonfig.c', 'vpdread.c']

if target == 'mvp':
	splash = env.Program('splash',
                             ['splash.c'],
                             CPPPATH = [ env['INCDIR'], env['INSTINCDIR'],
                                         '.', '../include' ],
                             LIBS = ['osd', 'av', 'dl'],
			     CCFLAGS = env['CCFLAGS'] + ' -DSTANDALONE',
                             LIBPATH = [ libdir ],
                             LINKFLAGS = [ '' ])

common = [ 'builtin.c', 'filebrowser.c', 'mvpmc.c', 'version_%s.c' % target ]

if target == 'mg35':
	src = [ common ]
	plibs = [ 'av', 'pthread_nommu' ]
elif target == 'nmt':
	src = [ common ]
	plibs = [ 'pthread', 'microhttpd' ]
elif target == 'mvp':
	src = [ common ]
	plibs = [ 'av', 'pthread' ]
else:
	src = [ common ]
	plibs = [ 'pthread' ]

if linkmode == 'static':
	plugins = [ 'mvpmc_html.plugin', 'mvpmc_http.plugin',
		    'mvpmc_osd.plugin', 'mvpmc_av.plugin',
		    'mvpmc_screensaver.plugin' ]
	libs = [ 'gw', 'refmem', 'osd', 'input', 'freetype', 'piutil',
		 'microhttpd', 'curl' ] + plibs
	linkflags = '-static'
else:
	plugins = [ ]
	libs = [ 'dl', 'gw', 'refmem', 'piutil' ] + plibs
	linkflags = ''

mvpmc = env.Program('mvpmc', src,
                    CPPPATH = [ env['INCDIR'], env['INSTINCDIR'],
                                '.', '../include' ],
                    LIBS = plugins + libs,
                    LIBPATH = [ libdir ],
                    LINKFLAGS = ldflags + ' ' + linkflags + ' ' + gtkldflags)

if target == 'nmt' or target == 'host':
	fuse = env.Program('mythfuse', 'mythfuse.c',
			   CPPPATH = [ env['INCDIR'], env['INSTINCDIR'] ],
			   LIBS = [ 'cmyth', 'fuse', 'pthread', 'refmem' ],
			   LIBPATH = [ libdir ],
			   LINKFLAGS = ldflags)

# XXX: for static linking, the dependencies are not correct
if linkmode == 'static':
	env.Depends(mvpmc, libdir + '/libmvpmc_html.plugin.a')
	env.Depends(mvpmc, libdir + '/libmvpmc_http.plugin.a')
	env.Depends(mvpmc, libdir + '/libmvpmc_osd.plugin.a')
	env.Depends(mvpmc, libdir + '/libmvpmc_av.plugin.a')
	env.Depends(mvpmc, libdir + '/libmvpmc_screensaver.plugin.a')
	env.Depends(mvpmc, libdir + '/libosd.a')
	env.Depends(mvpmc, libdir + '/libinput.a')
	env.Depends(mvpmc, libdir + '/libcurl.a')

if target == 'mvp':
	inst = env.Install(bindir, [ mvpmc, splash ])
elif target == 'nmt' or target == 'host':
	inst = env.Install(bindir, [ mvpmc, fuse ])
else:
	inst = env.Install(bindir, mvpmc)

env.Depends(mvpmc, version)
env.Depends(inst, mvpmc)

Return('inst')
