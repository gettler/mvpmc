#!/usr/bin/python
#
# libosd
#

Import ('env')

dir = env['BUILD_DIR']
target = env['TARG']
libdir = env['INSTLIBDIR']
freetype = env['INSTINCDIR'] + '/freetype2'
bindir = env['INSTBINDIR']
ldflags = env['LDFLAGS']
gtkcflags = env['GTKCFLAGS']
gtkldflags = env['GTKLDFLAGS']
linkmode = env['LINKMODE']

common = [ 'font.c', 'init.c', 'osd.c' ]

if target == 'mg35':
	src = [ common, 'mg35.c' ]
	dl = ''
	libs = [ 'freetype' ]
elif target == 'mvp':
	src = [ common, 'cursor.c', 'gfx.c', 'fb.c' ]
	dl = 'dl'
	libs = [ 'freetype' ]
elif target == 'nmt':
	src = [ common, 'dfb.c' ]
	dl = 'dl'
	libs = [ 'pthread' ]
	env.Append(CCFLAGS = ' -DUSE_LIBDL')
elif target == 'mvphd':
	src = [ common ]
	dl = 'dl'
	libs = [ 'pthread' ]
	env.Append(CCFLAGS = ' -DUSE_LIBDL')
else:
	src = [ common, 'gtk.c' ]
	dl = ''
	libs = [ 'freetype' ]

env.Append(CCFLAGS = ' ' + gtkcflags)

static = env.StaticLibrary('osd', src,
			   LIBS = 'piutil',
			   LIBPATH = [ libdir ],
			   CPPPATH = [ env['INCDIR'], env['INSTINCDIR'],
				       freetype, '.' ])

osdtest = env.Program('osdtest',
		      [ 'osdtest.c' ],
		      CPPPATH = [ env['INCDIR'], env['INSTINCDIR'], ],
		      LIBS = [ 'osd', dl ] + libs,
		      LIBPATH = [ libdir ],
		      LINKFLAGS = ldflags + ' ' + gtkldflags )

if linkmode == 'dynamic':
	shared = env.SharedLibrary('osd', src,
				   LIBS = 'piutil',
				   LIBPATH = [ libdir ],
				   CPPPATH = [ env['INCDIR'],
					       env['INSTINCDIR'],
					       freetype, '.' ])
	inst = env.Install(libdir, [ static, shared ])
else:
	inst = env.Install(libdir, [ static ])

inst2 = env.Install(bindir, osdtest)

ret = [ inst, inst2 ]

Return('ret')
