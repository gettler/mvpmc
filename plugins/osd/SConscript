#!/usr/bin/python
#
# osd plugin
#

import os

Import ('env')

dir = env['BUILD_DIR']
target = env['TARG']
libdir = env['INSTLIBDIR']
ldflags = env['LDFLAGS']
linkmode = env['LINKMODE']
bindir = env['INSTBINDIR']
pwd = os.getcwd()

env.Append(CCFLAGS = ' -Iplugins/osd')

if linkmode == 'dynamic':
	env.Append(CCFLAGS = ' -DPLUGIN_SUPPORT')
	
env.CFile('css_lexer.c', 'css_lexer.l')
env.CFile('css_parser.c', 'css_parser.y')
env.CFile('css_parser_test.c', 'css_parser.y')

common = [ 'css.c', 'osd.c', 'css_parser.c', 'list.c', 'draw.c' ]

if target == 'mvp':
    src = [ common ]
elif target == 'mg35':
    src = [ common ]
else:
    src = [ common ]

osdlib = libdir + '/libosd.a'
osdlibso = libdir + '/libosd.so'
inputlib = libdir + '/libinput.a'
inputlibso = libdir + '/libinput.so'
ftlib = libdir + '/libfreetype.a'
libs = '-a ' + osdlib + ' -a ' + inputlib + ' -a ' + ftlib

plugin = pwd + '/libmvpmc_osd.plugin.a'

foo = env.Command('dummy.a', 0,
	    'scons/build_plugin.sh -t ' + plugin + ' ' + libs)

static = env.StaticLibrary('mvpmc_osd.plugin.a', [ src, osdlib ],
                           CPPPATH = [env['INCDIR'], env['INSTINCDIR']],
                           LINKFLAGS = ldflags + ' ' + osdlib)

if linkmode == 'dynamic':
    shared = env.SharedLibrary('mvpmc_osd.plugin', [ src ],
                               CPPPATH = [env['INCDIR'], env['INSTINCDIR']],
                               LINKFLAGS = ldflags + ' ' + osdlibso + ' ' + inputlibso)
    inst = env.Install(libdir, [ static, shared ])
else:
    inst = env.Install(libdir, [ static ])

env.Depends(foo, static)
env.Depends(inst, foo)

csstest = env.Program('csstest',
                        [ 'csstest.c', 'css_parser_test.c' ],
                        CPPPATH = [ env['INCDIR'], env['INSTINCDIR'], ],
                        LIBS = [ 'refmem' ],
                        LIBPATH = [ libdir ],
                        LINKFLAGS = ldflags + ' -static' )

Return('inst')
