#!/usr/bin/python
#
# build microwindows
#

import os

Import('env')

home = os.environ['HOME']
cc = env['CC']
downloads = env['DOWNLOADS']
target = env['TARG']
machine = os.uname()[4]

if target == 'mvp':
  cross = '-c ' + env['CROSS']
  host = '--host=powerpc'
  Carg = '-C '
  patches = ''
else:
  cross = ''
  host = ''
  Carg = ''
  if machine == 'ppc':
    patches = '-p patches/microwindows-0.91_host_be.patch'
  else:
    patches = '-p patches/microwindows-0.91_host_le.patch'

file = downloads + '/microwindows-src-0.91.tar.gz'

e = Environment()
e.Tool('WGet', toolpath=['../../../scons'])

def GetSourceFile(url, output_dir, env):
  '''
  Create a node for a file retrieved via wget.
  This node can be used as a dependency in other rules.
  '''
  # Nab everything after the last slash as the filename
  basefilename = str(url)[str( url).rfind(os.sep) + 1:]
  munged = output_dir + os.sep + basefilename + os.sep + url
  node = env.SourceCode( munged, env.WGet() )
  return node

#url = 'ftp://microwindows.censoft.com/pub/microwindows/microwindows-src-0.91.tar.gz'
url = 'http://www.mvpmc.org/dl/microwindows-src-0.91.tar.gz'
pwd = os.getcwd()

build = env.Command('../../install/' + target + '/lib/libnano-X.a', 0,
                    'scons/build_lib.sh -d ' + pwd + '/' + target +
                    '/microwindows-0.91 -i ' + file + ' ' +
                    cross + ' ' +
                    '-I ' + pwd + '/../../install/' + target + ' ' +
                    Carg + host + ' ' +
                    '-p patches/microwindows-0.91_abs.patch ' +
                    '-p patches/microwindows-0.91.patch ' +
                    patches +
		    ' -p patches/microwindows-0.91_no_demos.patch ')

incdir = pwd + '/../../install/' + target + '/include'
cp = env.Command(incdir + '/nano-X.h', 0,
            'cp ' + pwd + '/' + target +
            '/microwindows-0.91/src/include/*.h ' + incdir)

if not os.path.exists(file):
	dl = GetSourceFile(url, '#' + downloads, e)
	env.Depends(build, dl)

env.Depends(cp, build)

env.SideEffect(['../../install/' + target + '/include/mwobjects.h',
                '../../install/' + target + '/include/mwtypes.h',
                '../../install/' + target + '/include/nxcolors.h',
                '../../install/' + target + '/include/nxdraw.h'],
               build)

env.Depends(build, pwd + '/patches/scr_mvposd.c')
env.Depends(build, pwd + '/patches/kbd_irm.c')

Return('build')
